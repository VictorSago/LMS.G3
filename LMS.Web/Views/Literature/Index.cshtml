@model IEnumerable<LMS.Core.Models.PublicationWithAuthorsDto>

@{
    ViewData["Title"] = "Literature";
}

<script type="text/javascript">
// let userObj = @Html.Raw(Json.Serialize(Model.ToList()));
// let userJsonData = '@Html.Raw(Json.Serialize(Model.ToList()))';
// console.log("UserObject:", userObj);
// console.log("UserJsonData:", userJsonData);
</script>

<h4 class="text-center mt-3">Literature</h4>
<hr />
<form asp-action="Index" asp-controller="Literature" class="course-search-form w-75 justify-content-center container-fluid m-auto" style="left:100px;">
    <input name="searchQuery" type="text" placeholder="Search Literature by Title" class="w-50 m-1">
        @{var list = new List<string>();

            foreach (var item in Model)
            {
                list.Add(item.TypeName);
            }

            list = list.Distinct().ToList();
            var items = new List<SelectListItem>();

            foreach (var type in list)
            {
                var selectListItem = (new SelectListItem
                {
                    Text = type,
                    Value = type
                });
                items.Add(selectListItem);
            }
        }
        <select name="filter" class="btn  btn-dark dropdown-toggle p-3 " onchange="this.form.submit()">
            <option selected="selected" value=" ">Please select</option>
            <option>Blogg</option>
            <option>Article</option>
            <option>Book</option>
        </select>
    <button type="submit" class="site-btn m-1">Search Literature</button>
</form>

<hr />

<div class="row justify-content-center">

    <div class="col-auto">
        <p>
            <a asp-action="Create" class="btn btn-outline-secondary">Create New</a>
        </p>
        <table class="table table-striped" id="litList">
            <thead class="text-muted bg-light">
                <tr>
                    <th class="sortable">
                        @Html.DisplayNameFor(model => model.Title)
                        <i class="fa fa-sort" aria-hidden="true"> </i>
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Description)
                    </th>
                    <th class="sortable" data-type="date">
                        @Html.DisplayNameFor(model => model.PublicationDate)  
                        <i class="fa fa-sort" aria-hidden="true"> </i>
                    </th>
                    <th class="sortable" data-type="level">
                        @Html.DisplayNameFor(model => model.Level)  
                        <i class="fa fa-sort" aria-hidden="true"> </i>
                    </th>
                    <th class="sortable">
                        @Html.DisplayNameFor(model => model.TypeName)  
                        <i class="fa fa-sort" aria-hidden="true"> </i>
                    </th>
                    <th class="sortable">
                        @Html.DisplayNameFor(model => model.SubjectName)  
                        <i class="fa fa-sort" aria-hidden="true"> </i>
                    </th>
                    <th class="sortable" data-type="number">
                        @Html.DisplayNameFor(model => model.Authors)
                        <i class="fa fa-sort" aria-hidden="true"> </i>
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
            @if (Model.Any())
            {
                foreach (var item in Model)
                {
                    <tr class="record">
                        <td>
                            @Html.DisplayFor(modelItem => item.Title)
                        </td>
                        <td>
                            <details close>
                                <summary>Description...</summary>
                                @Html.DisplayFor(modelItem => item.Description)
                            </details>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.PublicationDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Level)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TypeName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.SubjectName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Authors.Count)
                        </td>
                        <td colspan="3">
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-secondary" style="font-size:11px;">Edit</a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-info" style="font-size:11px;">Details</a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger" style="font-size:11px;">Delete</a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr class="alert-danger">
                    <td colspan="8"> No records found</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<script type="text/javascript">
// Code source: https://htmldom.dev/sort-a-table-by-clicking-its-headers/

// Query the table
const table = document.getElementById('litList');

// Query the headers
const headers = table.querySelectorAll('th');

// Query all rows
const tableBody = table.querySelector('tbody');
const rows = tableBody.querySelectorAll('.record');

// Loop over the headers
[].forEach.call(headers, function(header, index) {
    if (header.classList.contains('sortable')) {
        header.addEventListener('click', function () {
            // This function will sort the column
            sortColumn(index);
        });
    }
});

// Track sort directions
const directions = Array.from(headers).map(function(header) {
    return '';
});

// Transform the content of given cell in given column
const transform = function(index, content) {
    // Get the data type of column
    const type = headers[index].getAttribute('data-type');
    switch (type) {
        case 'number':
            return parseFloat(content);
        case 'date':
            return  Date.parse(content.trim());
        case 'level':
            if (content.trim() === 'Beginner') {
                return 0;
            }
            else if (content.trim() === 'Intermediate') {
                return 1;
            }
            else if (content.trim() === 'Advanced') {
                return 2;
            }
            else {
                return 3;
            }
        case 'string':
        default:
            return content;
    }
};

const sortColumn = function(index) {
    // Get the current direction
    const direction = directions[index] || 'asc';
    
    // A factor based on the direction
    const dir = (direction === 'asc') ? 1 : -1;
        
    // Clone the rows
    const newRows = Array.from(rows);

    // Sort rows by the content of cells
    newRows.sort(function(rowA, rowB) {
        // Get the content of cells
        const cellA = rowA.querySelectorAll('td')[index].innerHTML;
        const cellB = rowB.querySelectorAll('td')[index].innerHTML;
        
        // Transform the content of cells
        const a = transform(index, cellA);
        const b = transform(index, cellB);
        
        // And compare them
        switch (true) {
            case a > b: return 1 * dir;
            case a < b: return -1 * dir;
            case a === b: return 0;
        }
    });

    // Remove old rows
    [].forEach.call(rows, function(row) {
        tableBody.removeChild(row);
    });

    // Append new row
    newRows.forEach(function(newRow) {
        tableBody.appendChild(newRow);
    });
    
    // Reverse the direction
    directions[index] = direction === 'asc' ? 'desc' : 'asc';
};

</script>
